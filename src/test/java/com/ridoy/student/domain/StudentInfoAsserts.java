package com.ridoy.student.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StudentInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentInfoAllPropertiesEquals(StudentInfo expected, StudentInfo actual) {
        assertStudentInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertStudentInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentInfoAllUpdatablePropertiesEquals(StudentInfo expected, StudentInfo actual) {
        assertStudentInfoUpdatableFieldsEquals(expected, actual);
        assertStudentInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentInfoAutoGeneratedPropertiesEquals(StudentInfo expected, StudentInfo actual) {
        assertThat(expected)
            .as("Verify StudentInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentInfoUpdatableFieldsEquals(StudentInfo expected, StudentInfo actual) {
        assertThat(expected)
            .as("Verify StudentInfo relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getIsStudent()).as("check isStudent").isEqualTo(actual.getIsStudent()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStudentInfoUpdatableRelationshipsEquals(StudentInfo expected, StudentInfo actual) {}
}
